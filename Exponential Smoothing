def exponential_smoothing(demand=[],forecast_period=[],alpha=[]):

#Setup parameter
  n1 = int(input("Input number of historical demand period: "))
  for i in range(n1):
      n2 = int(input())
      demand.append(n2)
  forecast_period = int(input("Input number of forecast period: "))
  alpha = float(input("Input alpha with 0 <= alpha <= 1: "))

# Append np.nan into the demand array to cover future period
  demand = np.append(demand,[np.nan]*forecast_period)
# Define the forecast array
  forecast = np.full(n1+forecast_period,np.nan)
# Initialization of first forecast
  forecast[1]=demand[0]
# Create all the t+1 forecast until end of historical period
  for t in range(2,n1+1):
    forecast[t] = alpha*demand[t-1]+(1-alpha)*forecast[t-1]
# Forecast for all extra periods
  for t in range(n1+1,n1+forecast_period):
# Update the forecast as the previous forecast
    forecast[t] = forecast[t-1]

  error=demand-forecast
  df = pd.DataFrame.from_dict({'Demand':demand,'Forecast':forecast,'Error':error})
  df[['Demand','Forecast','Error']].plot()
  return df

def KPI(df):
  #BIAS
  avg_demand = df.loc[df['Error'].notnull(),'Demand'].mean()
  avg_bias = df['Error'].mean()
  scale_bias = avg_bias/avg_demand
  print('Bias: {:0.2f}, {:.2%}'.format(avg_bias,scale_bias))

  #MAPE
  abs_error = df['Error'].abs()
  abs_error_percentage = abs_error/df['Demand']
  MAPE = abs_error_percentage.mean()
  print('MAPE: {:.2%}'.format(MAPE))

  #MAE
  MAE = abs_error.mean()
  MAE_percentage = MAE/avg_demand

  print("MAE: {:.2f},{:.2%}".format(MAE,MAE_percentage))

  #RMSE root mean square error
  RMSE = np.sqrt((df["Error"]**2).mean())
  RMSE_percentage = RMSE/avg_demand
  print("RMSE: {:.2f},{:.2%}".format(RMSE,RMSE_percentage))

KPI(exponential_smoothing())
